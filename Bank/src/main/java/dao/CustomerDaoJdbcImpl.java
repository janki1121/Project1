package dao;

import java.sql.Connection;
//import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import exception.ApplicationException;
import pojo.CustomerPojo;

public class CustomerDaoJdbcImpl implements CustomerDao {

	//Logging Step 1 - obtain an instance of Logger
	private static final Logger logger = LoggerFactory.getLogger(CustomerDaoJdbcImpl.class);
	
	public List<CustomerPojo> getAllCustomers() throws ApplicationException {
		//logging Step 2 - use the logger and log the information in each method
		logger.info("Entered getAllCustomers() of the dao layer...");
		
		Connection connection = DBUtil.makeConnection();
		List<CustomerPojo> allCustomers = new ArrayList<CustomerPojo>();
		try {
			Statement stmt = connection.createStatement();
			String query = "SELECT * FROM customer_acc_details";
			ResultSet rs = stmt.executeQuery(query);
			
			while (rs.next()) {
				//creating a customer pojo object and copying each record from the result set into the customer pojo
				CustomerPojo customerPojo = new CustomerPojo(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),rs.getString(5), rs.getInt(6));
				
				//adding the customer pojo to the collection
				allCustomers.add(customerPojo);
			}
			
		} catch (SQLException e) {
			throw new ApplicationException();
			//return the array of customer pojo objects
			//return the collection of customer pojo
		
		}
		return allCustomers;
	}
	
	
	@Override
	public CustomerPojo addCustomer(CustomerPojo customerPojo) throws ApplicationException {
		//Logging step 2 - use the logger and log  the information in each method
		logger.info("Entered addCustomer() of the dao layer...");
		
		//Connection connection = DBUtil.makeConnection(); // step 1 and 2 is done in this
		
		String query = "INSERT INTO customer_acc_details(first_name, last_name, customer_username, customer_password, acc_balance) VALUES(?,  ?,  ?,  ?,  ?)"; 
		
		
		
		try {
		Connection connect = DBUtil.makeConnection();
		PreparedStatement pstmt = connect.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
		  //Statement stmt = connection.createStatement();
		//pstmt.setInt(1, customerPojo.getCustomer_id());
		pstmt.setString(1, customerPojo.getFirst_name());
		pstmt.setString(2, customerPojo.getLast_name());
		pstmt.setString(3, customerPojo.getCustomer_username());
		pstmt.setString(4, customerPojo.getCustomer_password());
		pstmt.setInt(5, customerPojo.getAcc_balance());
			
		//	pstmt.executeUpdate();
		  //what is pending is, the the auto generated customer id and set it  into the 
		  //customerPojo and return the customer pojo
		pstmt.executeUpdate();
		ResultSet rs = pstmt.getGeneratedKeys();
				
		 while(rs.next()) {
			 customerPojo.setCustomer_id(rs.getInt(1));
			 
		 }
		  //int autoGeneratedCustomer_id = rs.getInt(1);
		  //customerPojo.setCustomer_id(autoGeneratedCustomer_id);
		} catch (SQLException e) {
			//throw new ApplicationException();
			e.printStackTrace();
		} 
		return customerPojo;
	}  
		  
			
			
			
		// what pending is, get the auto generate customer_id and set it into the customerPojo and return the customer pojo
		
	

	@Override
	public CustomerPojo updateCustomer(CustomerPojo customerPojo) throws ApplicationException {
		
		logger.info("Entered updateCustomer() of the dao layer...");
		//String query = "UPDATE customer_acc_details SET acc_balance=acc_balance-? AND acc_balance=acc_balance+? WHERE customer_id=? AND customer_id=? ";
		//String minus = "UPDATE customer_acc_details SET acc_balance=acc_balance - ? WHERE customer_id=?";
		//String plus = "UPDATE customer_acc_details SET acc_balance=acc_balance + ? WHERE customer_id=?";
		Connection connect = DBUtil.makeConnection();
		//Connection con = null;
		Statement stmt = null;
		try {
			connect.setAutoCommit(false);
			
			stmt = connect.createStatement();
			
			//Execute first update statement
			stmt.executeUpdate("UPDATE customer_acc_details SET acc_balance=acc_balance-? WHERE customer_id=?;");
			stmt.executeUpdate("UPDATE customer_acc_details SET acc_balance=acc_balance+? WHERE customer_id=?;");
			
			connect.commit();
			
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				connect.rollback(); //in case of exception rollback the transactions
				
			} catch(SQLException e1) {
				e1.printStackTrace();
			}
		} 
		finally {
			try {
				if(stmt != null) stmt.close();
				if(connect != null) connect.close();
			} catch(SQLException e) {
			e.printStackTrace();
		}
		
		}
		
		//
		//String updateBalance = "Update customer_acc_details SET acc_balance=? WHERE customer_id=?";
		//String query = "Update customer_acc_details SET acc_balance=? WHERE customer_id=?";
		
		//try {
		//	PreparedStatement pstmt = connection.prepareStatement(query);
			
		//	pstmt.setInt(2, customerPojo.getAcc_balance());
		//	pstmt.setInt(1, customerPojo.getCustomer_id());
			
		//	pstmt.executeUpdate();
			
	//	} catch (SQLException e) { // we have caught SQLException
	//		throw new ApplicationException(); // and we are rethrowing it as ApplicationException
	//	}
		return customerPojo;
		
	}

	@Override
	public void deleteCustomer(int customer_id) throws ApplicationException {
		logger.info("Entered deleteCustomer() of the dao layer");
		
		Connection connection = DBUtil.makeConnection();
		Statement stmt = null;
		try {
			stmt = connection.createStatement();
			String query = "DELETE FROM customer_acc_details WHERE customer_id=" + customer_id;
			stmt.executeUpdate(query);
		
		} catch (SQLException e) {
			throw new ApplicationException();
			
		}
	}

	@Override
	public CustomerPojo getACustomer(int customer_id) throws ApplicationException {
		logger.info("Entered getACustomer() of dao layer...");
		
		Connection connection = DBUtil.makeConnection();
		Statement stmt = null;
		CustomerPojo customerPojo = null;
		try {
			stmt = connection.createStatement();
			String query = "SELECT * FROM customer_acc_details WHERE customer_id=" + customer_id;
			ResultSet rs = stmt.executeQuery(query);
			//traverse the rs
			//as i traverse i would copy the contents into a customer pojo object
			while(rs.next()) {
				customerPojo = new CustomerPojo();
				customerPojo.setCustomer_id(rs.getInt(1));
				customerPojo.setFirst_name(rs.getString(2));
				customerPojo.setLast_name(rs.getString(3));
				customerPojo.setCustomer_username(rs.getString(4));
				customerPojo.setCustomer_password(rs.getString(5));
				customerPojo.setAcc_balance(rs.getInt(6));	
			}
		} catch (SQLException e) {
			throw new ApplicationException();
		}
		return customerPojo;
	}

	
}	

	

